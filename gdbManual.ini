gdb [프로그램명] : 시작
quit or ctrl+d : 종료

break 함수 : 함수의 시작부분에 브레이크 포인트를 설정한다.
break 숫자 : 지정한 숫자 행에 브레이크 포인트를 설정한다.
break *주소 : 해당 주소에 브레이크 포인트를 설정한다.
tbreak : 1회용 브레이크 포인트를 설정한다.
info b : 현재 브레이크 포인트를 볼 수 있다.
clear : 브레이크 포인트 지운다.
delete : 모든 브레이크 포인트를 지운다.

run : 프로그램을 수행한다.
kill : 현재 진행중인 프로그램을 종료한다.
step : 현재 행을 수행 한 후에 정지한다. (함수 호출 시 내부로 진입)
step 5 : 5번 진행한다.
next : 현재 행을 수행 한 후에 정지한다. (함수 호출 시 내부로 진입하지 않고 외부로 진행한다.)
next 5 : 5번 진행한다.
continue : 다음 브레이크 포인트까지 진행한다.
until : 현재 루프를 빠져나간다.
finish : 현재 함수를 수행하고 빠져 나간다.
return : 현재 함수를 수행하지 않고 빠져 나간다.

watch [변수명] : 특정변수에 와치 포인트를 설정하고, 특정 변수가 바뀔 때마다 브레이크가 걸리면서 이전/현재 값을 출력한다.

info locals : 현재 스택의 로컬변수를 모두 출력한다.
info variables : 전역변수를 모두 출력한다.
print [변수명] : 해당변수 value를 출력한다.
포인터변수 입력시 주소값을 출력하고, *포인터변수를 입력하면 실제 값을 출력한다.

print $레지스터 : 레지스터 값을 출력한다.
print *포인터 : struct/class의 배열일 때 배열의 크기를 알린다.
print /[출력형식] [변수명] : 출력형식에 맞추어 변수값을 출력한다.

**출력형식
=> t : 2진수
=> o : 8진수
=> d : 부호없는 10진수
=> u : 부호없는 10진수
=> x : 16진수
=> c : 최초 1바이트 값을 문자형으로 출력
=> f : 부동소수점
=> a : 가장 가까운 심볼의 오프셋 출력

print (캐스팅)[변수명] : 변수를 캐스팅하여 출력
print [포인터변수or배열]+[숫자] : 특정 주소 + 숫자 위치 출력 (p (array[1]+4))
print [변수명] = [value] : 특정 변수의 값을 설정한다.
info registers : 레지스터 전체 출력
display 변수명 : 매번 진행할때마다 특정변수를 계속 출력한다.
disable display  [번호] : 일시적으로 디스플레이 중단한다.
enable display [번호] : 중단했던 번호를 다시 출력한다.
undisplay [번호] : 출력하던 display 변수를 제거한다.

info frame : 스택 프레임 내용을 출력한다.
info args : 함수 호출시 인자를 출력한다.
info locals : 함수의 지역변수를 출력한다.
info catch : 함수의 예외 핸들러를 출력한다.
bt : 전체 스택 프레임 출력(콜스택)
frame [스택번호] : 스택번호의 스택 프레임으로 이동
up : 상위 스택 프레임으로 이동
up [숫자] : 숫자만큼 상위 스택프레임으로 이동
down : 하위 스택 프레임으로 이동
down [숫자] : 숫자만큼 하위 스택프레임으로 이동

x/[출력형식][범위의단위] [메모리주소나 함수명]
=> 범위 : 기본 4바이트 단위
=> 범위의 단위
    b : 1 byte
    h : 2 byte
    w : 4 byte
    g : 8 byte

disas 함수명 : 특정함수의 어셈블리 코드 출력
disas 주소 주소 : 주소 사이의 어셈블리 코드를 출력
call 함수명 : 특정 함수를 인자값으로 호출한다.
jump *주소 : 주소로 강제적으로 분기한다.
jump [행번호] : 특정 행으로 강제 분기
jump [함수명] : 특정 함수로 강제 분기
info signals : signal 종류 출력
info tab키 : info로 확인 가능한 명령어 출력
set {타입}[주소] = [값] : 특정 메모리에 값을 지정

info set : 설정 가능한 내용 출력

x/(명령수) i (선두 주소)
=> 앞쪽의 주소에서 지정된 명령어만큼 역어셈블

disable [브레이크 포인트 번호] : [브레이크 포인트 비활성화]
enable [브레이크 포인트 번호] :[브레이크 포인트 활성화]
ignore [브레이크 포인트 번호] [비활성화 횟수]